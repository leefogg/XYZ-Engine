px_vLightPosScale.xyz = ModelMatrix * light.pos = Lights Position in world space
px_vLightPosScale.w = 1.0 / Radius
px_fFalloff = Falloff Pow * 2
px_fTranslucenyMul = ?


vec3 vPos = vertexPosition;
vec3 vLightDir = px_vLightPosScale.xyz - vPos;
float fDistance = sqrt(dot(vLightDir, vLightDir));
float fAttenuation =  pow(1.0 - min(fDistance * px_vLightPosScale.w, 1.0), px_fFalloff);	
vLightDir = normalize(vLightDir);

float fLDotN = dot(vLightDir, faceNormal);
float fLightAmount = max(fLDotN, 0.0);


float fLightScatterAmount = max(-fLDotN, 0.0)
float fLightTransport = clamp(dot(vEye, vLightDir + FaceNormal * 0.2), -1.0, 0.0);
fLightTransport = pow(fLightTransport, 16.0);
float fLightScatter = (min(2.0, fLightTransport * 16.0) + fLightScatterAmount) * pixelColor;

vec3 vDiffuse = pixelColor * (light.color * light.brightness) * (fLightAmount + fLightScatter * px_fTranslucenyMul);
vDiffuse += vSpecular;
vDiffuse *= fAttenuation;


Optimizations:
	Min multidrawIndirect batch size
	Replace Position buffer with depth buffer
	Shader varients
	Replace the illum GBuffer with an extracted one from the lighting buffer
	Texture arrays
	Bake staticObjects + static entities model matrix into geometry
	Bake static objects per visibility area into same draw call
	Render Query + BeginConditionalRender
	Instancing
	Lazy model matrix'
	Use OpenTK's Matrix methods
	Clean up struct uses

TODO:
	Color
		Colour correction / White Point / Exposure

	Graphics
		albedo color.w is translucentcy

	Detail textures
	Terrain
	Time sections
	Fix rotation of spotlights
	Get line cube finished
	Line pyramid for point lights
	Refactor location of code into project layers and seperate projects for examples
	Add auditing
		Add size to Buffer class
		frame timings to CSV file
		File for each run
			All metrics in one new row
	FPS graph
	Investigate if materials have a global specular scaler
	Box lights
	Fog boxes
	Decals
	Sky