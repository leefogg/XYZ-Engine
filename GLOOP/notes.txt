TODO:
	Optimizations:
		GPU:
			Replace Position buffer with depth buffer
			Replace the illum GBuffer with an extracted one from the lighting buffer
			Instancing
			Use SSBOs instead of UBOs
				Removes padding BS which enables the use of compute shaders
			Object combining
				Measure how small render batches can get if static objects are combined
			Combine bloom combine, color correction, gamma correction, SSAO and dithering into one shader
			Combine area's objects back into one buffer set
				Start with lights - simpler
			Remove FinalFrameBuffer
			Culling
				High-z
					https://miketuritzin.com/post/hierarchical-depth-buffers/
					https://www.rastergrid.com/blog/2010/10/hierarchical-z-map-based-occlusion-culling/
					https://www.gamasutra.com/view/feature/3394/occlusion_culling_algorithms.php?print=1
					https://interplayoflight.wordpress.com/2017/11/15/experiments-in-gpu-based-occlusion-culling/
				Frustum
					https://iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm
		CPU:
			Lazy model matrix'
			Use OpenTK's Matrix methods
			Clean up struct uses
			Frustum Culling
			IndirectList
				Stores proper list and a list of indicies
				Indicies mirrored on GPU to flag objects that are visible
			ref/in/out
			swapchain
		Other:
			Rename HLP to HPL
			Handle VR startup errors in SetUpOpenVR
			ICameraDriver

	To be inline with HPL:
		Textures seem to be loading RGB not sRGB
		Material SpecificVariables
		Reflections (done in geo pass)
		Illum geometry pass
		Detail textures
		Box lights
		Fog boxes
		Decals
		Sky
		Shadows
		Remove lighting map
		Attached lights
		Light Gobos
		Animation
		Physics
		Terrain
			Smoother
			All layers
		Connected lights
		Map settings
			Skybox
			Max draw distance
			Fog
			Directional light
			Particles



	Portal culling
		VR
		Check when render portals are dispatched on SOMA by searching ANY_SAMPLES_PASSED

	Graphics
		albedo color.w is translucentcy

	Time sections
	Refactor location of code into project layers and seperate projects for examples
	Add auditing
		Add size to Buffer class
		frame timings to CSV file
		File for each run
			All metrics in one new row
	FPS graph
	Investigate if materials have a global specular scaler

Proposed ideal render pipeline:
	Draw static objects
	Dispatch hierarchical z culling compute shader using drawn static objects
	foreach (var area in Scene.VisibleAreas) {
		Dispatch culling shader 
	}
	Dispatch buffer copying shader
	Draw dynamic objects
		Barrier PARAMETER_BUFFER_ARB
		MultiDrawElementsIndirectCountARB

	intersection shader {
		uniform box3 areaBoundingBox;
		uniform vec3[6] frustumPlanes;
		uniform ReadBuffer<mat4> boudingBoxModelMatricies; // Bounding box of all models in area
		uniform WriteBuffer<bool> visibleFlags; // Flags to indicate if model should be drawn
		uniform ReadBuffer<int> modelIndicies; // visibleFlags is for all objects in scene but we're working with certain objects
	
		main {
			for (int i=0; i<models.count; i++) { // Might want to share this over multiple compute work groups
				Box3 modelBoundingBox = createAABB(boudingBoxModelMatricies[i]);
				if (areaBoundingBox.Intersects(modelBoundingBox) {
					if (indersectsFrustum(modelBoundingBox) {
						visibleFlags[modelIndicies[i]] = true;
					}
				}
			}
		}
	}

	buffer copying shader {
		uniform ReadBuffer<bool> visibleFlags; // Flags to indicate if model should be drawn
		uniform ReadBuffer<MultiDrawIndirectCommand> in_drawIndirect
		uniform ReadBuffer<Mat4> in_modelMatricies;
		uniform ReadBuffer<Material> in_modelMaterials;
		uniform WriteBuffer<MultiDrawIndirectCommand> out_drawIndirect
		uniform WriteBuffer<Mat4> out_modelMatricies;
		uniform WriteBuffer<Material> out_modelMaterials;
	
		main {
			for (int i=0; i<numModels; i++) {
				if (visibleFlags[i]) {
					out_drawIndirect.append(in_drawIndirect[i]);
					...
				]
			}
		}
	}

Culling test project
	Draw spheres using MDI
	Basic compute shader to clone buffer
	Use clone buffer to draw (use barrier)
	Store spheres info in other buffer
	Count visible spheres in atomic counter
	Use atomic counter as a buffer (GL_ATOMIC_COUNTER_BUFFER)
	Bind atomic counter buffer as draw parameter buffer (PARAMETER_BUFFER_ARB)
	Use parameter buffer MultiDrawElementsIndirectCountARB (use barrier)
	Dont copy occluded objects
Move room buffers to one global buffers
	Add model matrix buffer
		Use for bounding box pass to test
	Move buffers
		4 buffers - DrawCommands, ModelMatrcies, Materials and Bounding boxes
		Stored in room-by-room sections for cache coherency
		One to one relationship, no index buffer?
		Use BindBufferRange to keep indicies in shader starting from 0?